"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require("./Libary/crypto-js");
var BigInt = require("./Libary/BigInteger.js");
var Crypto = (function () {
    function Crypto(originData) {
        this.firstKey = '0CoJUm6Qyw8W8jud';
        this.aes_mv = '0102030405060708';
        this.secondKey = "";
        this.modulus = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7';
        this.pubKey = '010001';
        this.originData = originData;
        this.cryptoResult = this.encrypt(this.originData);
    }
    Crypto.prototype.getCryptoResult = function () {
        return this.cryptoResult;
    };
    Crypto.prototype.createSecretKey = function (size) {
        if (size === void 0) { size = 16; }
        var keys = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var key = "";
        for (var i = 0; i < size; i++) {
            var pos = Math.random() * keys.length;
            pos = Math.floor(pos);
            key = key + keys.charAt(pos);
        }
        return key;
    };
    Crypto.prototype.aesEncrypt = function (word, secKey) {
        var key = CryptoJS.enc.Utf8.parse(secKey);
        var iv = CryptoJS.enc.Utf8.parse(this.aes_mv);
        var srcs = CryptoJS.enc.Utf8.parse(word);
        var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var res = encrypted.toString();
        console.log(res);
        return res;
    };
    Crypto.prototype.zfill = function (str, size) {
        while (str.length < size)
            str = "0" + str;
        return str;
    };
    Crypto.prototype.rsaEncrypt = function (text, pubKey, modulus) {
        var _text = text.split('').reverse().join('');
        var biText = BigInt(CryptoJS.enc.Utf8.parse(_text).toString(), 16), biEx = BigInt(pubKey, 16), biMod = BigInt(modulus, 16), biRet = biText.modPow(biEx, biMod);
        return this.zfill(biRet.toString(16), 256);
    };
    Crypto.prototype.encrypt = function (obj) {
        var text = JSON.stringify(obj);
        var secKey = this.createSecretKey(16);
        var firstRes = this.aesEncrypt(text, this.firstKey);
        var secondRes = this.aesEncrypt(firstRes, secKey);
        var encSecKey = this.rsaEncrypt(secKey, this.pubKey, this.modulus);
        return {
            params: secondRes,
            encSecKey: encSecKey
        };
    };
    return Crypto;
}());
exports.Crypto = Crypto;
//# sourceMappingURL=data:application/json;base64,