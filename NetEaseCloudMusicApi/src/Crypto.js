"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require("../Libary/crypto-js/index.js");
var BigInt = require("../Libary/BigInteger.js");
var Crypto = (function () {
    function Crypto() {
    }
    Crypto.createSecretKey = function (size) {
        if (size === void 0) { size = 16; }
        var keys = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var key = "";
        for (var i = 0; i < size; i++) {
            var pos = Math.random() * keys.length;
            pos = Math.floor(pos);
            key = key + keys.charAt(pos);
        }
        return key;
    };
    Crypto.aesEncrypt = function (word, secKey) {
        var key = CryptoJS.enc.Utf8.parse(secKey);
        var iv = CryptoJS.enc.Utf8.parse(this.aes_mv);
        var srcs = CryptoJS.enc.Utf8.parse(word);
        var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var res = encrypted.toString();
        return res;
    };
    Crypto.zfill = function (str, size) {
        while (str.length < size)
            str = "0" + str;
        return str;
    };
    Crypto.rsaEncrypt = function (text, pubKey, modulus) {
        var _text = text.split('').reverse().join('');
        var biText = BigInt(CryptoJS.enc.Utf8.parse(_text).toString(), 16), biEx = BigInt(pubKey, 16), biMod = BigInt(modulus, 16), biRet = biText.modPow(biEx, biMod);
        return this.zfill(biRet.toString(16), 256);
    };
    Crypto.encrypt = function (obj) {
        var text = JSON.stringify(obj);
        var secKey = this.createSecretKey(16);
        var firstRes = this.aesEncrypt(text, this.firstKey);
        var secondRes = this.aesEncrypt(firstRes, secKey);
        var encSecKey = this.rsaEncrypt(secKey, this.pubKey, this.modulus);
        return {
            params: secondRes,
            encSecKey: encSecKey
        };
    };
    Crypto.firstKey = '0CoJUm6Qyw8W8jud';
    Crypto.aes_mv = '0102030405060708';
    Crypto.secondKey = "";
    Crypto.modulus = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7';
    Crypto.pubKey = '010001';
    return Crypto;
}());
exports.Crypto = Crypto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHNfc3JjL0NyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHVEQUEwRDtBQUMxRCxnREFBbUQ7QUFFbkQ7SUFBQTtJQWlGQSxDQUFDO0lBbEVpQixzQkFBZSxHQUE3QixVQUE4QixJQUFTO1FBQVQscUJBQUEsRUFBQSxTQUFTO1FBQ25DLElBQU0sSUFBSSxHQUFHLGdFQUFnRSxDQUFDO1FBQzlFLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdEMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBT2EsaUJBQVUsR0FBeEIsVUFBeUIsSUFBSSxFQUFFLE1BQU07UUFDakMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUvQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFPYSxZQUFLLEdBQW5CLFVBQW9CLEdBQUcsRUFBRSxJQUFJO1FBQ3pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJO1lBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBUWEsaUJBQVUsR0FBeEIsVUFBeUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPO1FBQzFDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQ2hFLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUN6QixLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFDM0IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFNYSxjQUFPLEdBQXJCLFVBQXNCLEdBQUc7UUFDckIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxPQUFPO1lBQ0gsTUFBTSxFQUFFLFNBQVM7WUFDakIsU0FBUyxFQUFFLFNBQVM7U0FDdkIsQ0FBQTtJQUNMLENBQUM7SUE5RWUsZUFBUSxHQUFVLGtCQUFrQixDQUFDO0lBQ3JDLGFBQU0sR0FBVSxrQkFBa0IsQ0FBQztJQUM1QyxnQkFBUyxHQUFVLEVBQUUsQ0FBQztJQUdiLGNBQU8sR0FBVSxvUUFBb1EsQ0FBQTtJQUNyUixhQUFNLEdBQVUsUUFBUSxDQUFFO0lBeUU5QyxhQUFDO0NBQUEsQUFqRkQsSUFpRkM7QUFqRlksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyDliqDlr4bnsbtcclxuaW1wb3J0IENyeXB0b0pTID0gcmVxdWlyZShcIi4uL0xpYmFyeS9jcnlwdG8tanMvaW5kZXguanNcIik7ICAgICAgLy8g5Yqg5a+G57G75bqTXHJcbmltcG9ydCBCaWdJbnQgPSByZXF1aXJlKFwiLi4vTGliYXJ5L0JpZ0ludGVnZXIuanNcIik7ICAvLyDlpKfmlbDnsbvlupNcclxuXHJcbmV4cG9ydCBjbGFzcyBDcnlwdG97XHJcbiAgICAvLyBBRVPliqDlr4ZcclxuICAgIHN0YXRpYyByZWFkb25seSBmaXJzdEtleTpzdHJpbmcgPSAnMENvSlVtNlF5dzhXOGp1ZCc7ICAgLy8gYWVz56ys5LiA5qyh5Yqg5a+G56eY6ZKl5Li677yM5Zu65a6aXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgYWVzX212OnN0cmluZyA9ICcwMTAyMDMwNDA1MDYwNzA4JzsgICAgIC8vIGFlc+WBj+enu++8jOWbuuWumlxyXG4gICAgc3RhdGljIHNlY29uZEtleTpzdHJpbmcgPSBcIlwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFlc+esrOS6jOasoeWKoOWvhuenmOmSpeWcqOWKoOWvhuaXtumaj+acuuiOt+WPllxyXG5cclxuICAgIC8vIFJTQeWKoOWvhlxyXG4gICAgc3RhdGljIHJlYWRvbmx5IG1vZHVsdXM6c3RyaW5nID0gJzAwZTBiNTA5ZjYyNTlkZjg2NDJkYmMzNTY2MjkwMTQ3N2RmMjI2NzdlYzE1MmI1ZmY2OGFjZTYxNWJiN2I3MjUxNTJiM2FiMTdhODc2YWVhOGE1YWE3NmQyZTQxNzYyOWVjNGVlMzQxZjU2MTM1ZmNjZjY5NTI4MDEwNGUwMzEyZWNiZGE5MjU1N2M5Mzg3MDExNGFmNmM5ZDA1YzRmN2YwYzM2ODViN2E0NmJlZTI1NTkzMjU3NWNjZTEwYjQyNGQ4MTNjZmU0ODc1ZDNlODIwNDdiOTdkZGVmNTI3NDFkNTQ2YjhlMjg5ZGM2OTM1YjNlY2UwNDYyZGIwYTIyYjhlNydcclxuICAgIHN0YXRpYyByZWFkb25seSBwdWJLZXk6c3RyaW5nID0gJzAxMDAwMScgOyAgICAgICAgLy8gcnNh5YWs6ZKlXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQ6ZqP5py65pWw77yMc2l6Zem7mOiupDE2XHJcbiAgICAgKiBAcGFyYW0gc2l6ZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVTZWNyZXRLZXkoc2l6ZSA9IDE2KSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODlcIjtcclxuICAgICAgICBsZXQga2V5ID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcG9zID0gTWF0aC5yYW5kb20oKSAqIGtleXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBwb3MgPSBNYXRoLmZsb29yKHBvcyk7XHJcbiAgICAgICAgICAgIGtleSA9IGtleSArIGtleXMuY2hhckF0KHBvcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog5L2/55SoQUVT5Yqg5a+G5ZKMQkFTRTY057yW56CBXHJcbiAgICAgKiBAcGFyYW0gd29yZCDliqDlr4bnmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSBzZWNLZXkg5Yqg5a+G5a+G6ZKlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYWVzRW5jcnlwdCh3b3JkLCBzZWNLZXkpIHtcclxuICAgICAgICBsZXQga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoc2VjS2V5KTsgIC8v5Y2B5YWt5L2N5Y2B5YWt6L+b5Yi25pWw5L2c5Li65a+G6ZKlXHJcbiAgICAgICAgbGV0IGl2ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UodGhpcy5hZXNfbXYpOyAgIC8v5Y2B5YWt5L2N5Y2B5YWt6L+b5Yi25pWw5L2c5Li65a+G6ZKl5YGP56e76YePXHJcbiAgICAgICAgbGV0IHNyY3MgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh3b3JkKTtcclxuICAgICAgICBsZXQgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQoc3Jjcywga2V5LCB7IGl2OiBpdiwgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNyB9KTtcclxuICAgICAgICBsZXQgcmVzID0gZW5jcnlwdGVkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aGr5YWFXHJcbiAgICAgKiBAcGFyYW0gc3RyIOWOn+Wni+Wtl+espuS4slxyXG4gICAgICogQHBhcmFtIHNpemUg5pyf5pyb6ZW/5bqmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgemZpbGwoc3RyLCBzaXplKSB7XHJcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKSBzdHIgPSBcIjBcIiArIHN0cjtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUlNB5Yqg5a+GXHJcbiAgICAgKiBAcGFyYW0gdGV4dCDliqDlr4blhoXlrrlcclxuICAgICAqIEBwYXJhbSBwdWJLZXkg5YWs6ZKlXHJcbiAgICAgKiBAcGFyYW0gbW9kdWx1cyDlm7rlrprlgLxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByc2FFbmNyeXB0KHRleHQsIHB1YktleSwgbW9kdWx1cykge1xyXG4gICAgICAgIGNvbnN0IF90ZXh0ID0gdGV4dC5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xyXG4gICAgICAgIGNvbnN0IGJpVGV4dCA9IEJpZ0ludChDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShfdGV4dCkudG9TdHJpbmcoKSwgMTYpLFxyXG4gICAgICAgICAgICBiaUV4ID0gQmlnSW50KHB1YktleSwgMTYpLFxyXG4gICAgICAgICAgICBiaU1vZCA9IEJpZ0ludChtb2R1bHVzLCAxNiksXHJcbiAgICAgICAgICAgIGJpUmV0ID0gYmlUZXh0Lm1vZFBvdyhiaUV4LCBiaU1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuemZpbGwoYmlSZXQudG9TdHJpbmcoMTYpLCAyNTYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg5a+G566X5rOV5YWl5Y+jXHJcbiAgICAgKiBAcGFyYW0gb2JqIOW+heWKoOWvhuWvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGVuY3J5cHQob2JqKSB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IEpTT04uc3RyaW5naWZ5KG9iaik7XHJcbiAgICAgICAgY29uc3Qgc2VjS2V5ID0gdGhpcy5jcmVhdGVTZWNyZXRLZXkoMTYpO1xyXG4gICAgICAgIGxldCBmaXJzdFJlcyA9IHRoaXMuYWVzRW5jcnlwdCh0ZXh0LCB0aGlzLmZpcnN0S2V5KTtcclxuICAgICAgICBjb25zdCBzZWNvbmRSZXMgPSB0aGlzLmFlc0VuY3J5cHQoZmlyc3RSZXMsIHNlY0tleSk7XHJcbiAgICAgICAgY29uc3QgZW5jU2VjS2V5ID0gdGhpcy5yc2FFbmNyeXB0KHNlY0tleSwgdGhpcy5wdWJLZXksIHRoaXMubW9kdWx1cyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcGFyYW1zOiBzZWNvbmRSZXMsXHJcbiAgICAgICAgICAgIGVuY1NlY0tleTogZW5jU2VjS2V5XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl19