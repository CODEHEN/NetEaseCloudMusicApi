"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require("../Libary/crypto-js/index.js");
var BigInt = require("../Libary/BigInteger.js");
var Crypto = (function () {
    function Crypto() {
    }
    Crypto.createSecretKey = function (size) {
        if (size === void 0) { size = 16; }
        var keys = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var key = "";
        for (var i = 0; i < size; i++) {
            var pos = Math.random() * keys.length;
            pos = Math.floor(pos);
            key = key + keys.charAt(pos);
        }
        return key;
    };
    Crypto.aesEncrypt = function (word, secKey) {
        var key = CryptoJS.enc.Utf8.parse(secKey);
        var iv = CryptoJS.enc.Utf8.parse(this.aes_mv);
        var srcs = CryptoJS.enc.Utf8.parse(word);
        var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var res = encrypted.toString();
        console.log(res);
        return res;
    };
    Crypto.zfill = function (str, size) {
        while (str.length < size)
            str = "0" + str;
        return str;
    };
    Crypto.rsaEncrypt = function (text, pubKey, modulus) {
        var _text = text.split('').reverse().join('');
        var biText = BigInt(CryptoJS.enc.Utf8.parse(_text).toString(), 16), biEx = BigInt(pubKey, 16), biMod = BigInt(modulus, 16), biRet = biText.modPow(biEx, biMod);
        return this.zfill(biRet.toString(16), 256);
    };
    Crypto.encrypt = function (obj) {
        var text = JSON.stringify(obj);
        var secKey = this.createSecretKey(16);
        var firstRes = this.aesEncrypt(text, this.firstKey);
        var secondRes = this.aesEncrypt(firstRes, secKey);
        var encSecKey = this.rsaEncrypt(secKey, this.pubKey, this.modulus);
        return {
            params: secondRes,
            encSecKey: encSecKey
        };
    };
    Crypto.firstKey = '0CoJUm6Qyw8W8jud';
    Crypto.aes_mv = '0102030405060708';
    Crypto.secondKey = "";
    Crypto.modulus = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7';
    Crypto.pubKey = '010001';
    return Crypto;
}());
exports.Crypto = Crypto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHNfc3JjL0NyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHVEQUEwRDtBQUMxRCxnREFBbUQ7QUFFbkQ7SUFBQTtJQWlGQSxDQUFDO0lBbEVpQixzQkFBZSxHQUE3QixVQUE4QixJQUFTO1FBQVQscUJBQUEsRUFBQSxTQUFTO1FBQ25DLElBQU0sSUFBSSxHQUFHLGdFQUFnRSxDQUFDO1FBQzlFLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdEMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBT2EsaUJBQVUsR0FBeEIsVUFBeUIsSUFBSSxFQUFFLE1BQU07UUFDakMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQU9hLFlBQUssR0FBbkIsVUFBb0IsR0FBRyxFQUFFLElBQUk7UUFDekIsT0FBTyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUk7WUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMxQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFRYSxpQkFBVSxHQUF4QixVQUF5QixJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU87UUFDMUMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFDaEUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQ3pCLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUMzQixLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQU1hLGNBQU8sR0FBckIsVUFBc0IsR0FBRztRQUNyQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLE9BQU87WUFDSCxNQUFNLEVBQUUsU0FBUztZQUNqQixTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFBO0lBQ0wsQ0FBQztJQTlFZSxlQUFRLEdBQVUsa0JBQWtCLENBQUM7SUFDckMsYUFBTSxHQUFVLGtCQUFrQixDQUFDO0lBQzVDLGdCQUFTLEdBQVUsRUFBRSxDQUFDO0lBR2IsY0FBTyxHQUFVLG9RQUFvUSxDQUFBO0lBQ3JSLGFBQU0sR0FBVSxRQUFRLENBQUU7SUF5RTlDLGFBQUM7Q0FBQSxBQWpGRCxJQWlGQztBQWpGWSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIOWKoOWvhuexu1xyXG5pbXBvcnQgQ3J5cHRvSlMgPSByZXF1aXJlKFwiLi4vTGliYXJ5L2NyeXB0by1qcy9pbmRleC5qc1wiKTsgICAgICAvLyDliqDlr4bnsbvlupNcclxuaW1wb3J0IEJpZ0ludCA9IHJlcXVpcmUoXCIuLi9MaWJhcnkvQmlnSW50ZWdlci5qc1wiKTsgIC8vIOWkp+aVsOexu+W6k1xyXG5cclxuZXhwb3J0IGNsYXNzIENyeXB0b3tcclxuICAgIC8vIEFFU+WKoOWvhlxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGZpcnN0S2V5OnN0cmluZyA9ICcwQ29KVW02UXl3OFc4anVkJzsgICAvLyBhZXPnrKzkuIDmrKHliqDlr4bnp5jpkqXkuLrvvIzlm7rlrppcclxuICAgIHN0YXRpYyByZWFkb25seSBhZXNfbXY6c3RyaW5nID0gJzAxMDIwMzA0MDUwNjA3MDgnOyAgICAgLy8gYWVz5YGP56e777yM5Zu65a6aXHJcbiAgICBzdGF0aWMgc2Vjb25kS2V5OnN0cmluZyA9IFwiXCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWVz56ys5LqM5qyh5Yqg5a+G56eY6ZKl5Zyo5Yqg5a+G5pe26ZqP5py66I635Y+WXHJcblxyXG4gICAgLy8gUlNB5Yqg5a+GXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgbW9kdWx1czpzdHJpbmcgPSAnMDBlMGI1MDlmNjI1OWRmODY0MmRiYzM1NjYyOTAxNDc3ZGYyMjY3N2VjMTUyYjVmZjY4YWNlNjE1YmI3YjcyNTE1MmIzYWIxN2E4NzZhZWE4YTVhYTc2ZDJlNDE3NjI5ZWM0ZWUzNDFmNTYxMzVmY2NmNjk1MjgwMTA0ZTAzMTJlY2JkYTkyNTU3YzkzODcwMTE0YWY2YzlkMDVjNGY3ZjBjMzY4NWI3YTQ2YmVlMjU1OTMyNTc1Y2NlMTBiNDI0ZDgxM2NmZTQ4NzVkM2U4MjA0N2I5N2RkZWY1Mjc0MWQ1NDZiOGUyODlkYzY5MzViM2VjZTA0NjJkYjBhMjJiOGU3J1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IHB1YktleTpzdHJpbmcgPSAnMDEwMDAxJyA7ICAgICAgICAvLyByc2HlhazpkqVcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnlJ/miJDpmo/mnLrmlbDvvIxzaXpl6buY6K6kMTZcclxuICAgICAqIEBwYXJhbSBzaXplIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZVNlY3JldEtleShzaXplID0gMTYpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OVwiO1xyXG4gICAgICAgIGxldCBrZXkgPSBcIlwiO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwb3MgPSBNYXRoLnJhbmRvbSgpICoga2V5cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHBvcyA9IE1hdGguZmxvb3IocG9zKTtcclxuICAgICAgICAgICAga2V5ID0ga2V5ICsga2V5cy5jaGFyQXQocG9zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDkvb/nlKhBRVPliqDlr4blkoxCQVNFNjTnvJbnoIFcclxuICAgICAqIEBwYXJhbSB3b3JkIOWKoOWvhueahOaVsOaNrlxyXG4gICAgICogQHBhcmFtIHNlY0tleSDliqDlr4blr4bpkqVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhZXNFbmNyeXB0KHdvcmQsIHNlY0tleSkge1xyXG4gICAgICAgIGxldCBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShzZWNLZXkpOyAgLy/ljYHlha3kvY3ljYHlha3ov5vliLbmlbDkvZzkuLrlr4bpkqVcclxuICAgICAgICBsZXQgaXYgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh0aGlzLmFlc19tdik7ICAgLy/ljYHlha3kvY3ljYHlha3ov5vliLbmlbDkvZzkuLrlr4bpkqXlgY/np7vph49cclxuICAgICAgICBsZXQgc3JjcyA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHdvcmQpO1xyXG4gICAgICAgIGxldCBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChzcmNzLCBrZXksIHsgaXY6IGl2LCBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQywgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3IH0pO1xyXG4gICAgICAgIGxldCByZXMgPSBlbmNyeXB0ZWQudG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDloavlhYVcclxuICAgICAqIEBwYXJhbSBzdHIg5Y6f5aeL5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSDmnJ/mnJvplb/luqZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB6ZmlsbChzdHIsIHNpemUpIHtcclxuICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHNpemUpIHN0ciA9IFwiMFwiICsgc3RyO1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSU0HliqDlr4ZcclxuICAgICAqIEBwYXJhbSB0ZXh0IOWKoOWvhuWGheWuuVxyXG4gICAgICogQHBhcmFtIHB1YktleSDlhazpkqVcclxuICAgICAqIEBwYXJhbSBtb2R1bHVzIOWbuuWumuWAvFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJzYUVuY3J5cHQodGV4dCwgcHViS2V5LCBtb2R1bHVzKSB7XHJcbiAgICAgICAgY29uc3QgX3RleHQgPSB0ZXh0LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XHJcbiAgICAgICAgY29uc3QgYmlUZXh0ID0gQmlnSW50KENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKF90ZXh0KS50b1N0cmluZygpLCAxNiksXHJcbiAgICAgICAgICAgIGJpRXggPSBCaWdJbnQocHViS2V5LCAxNiksXHJcbiAgICAgICAgICAgIGJpTW9kID0gQmlnSW50KG1vZHVsdXMsIDE2KSxcclxuICAgICAgICAgICAgYmlSZXQgPSBiaVRleHQubW9kUG93KGJpRXgsIGJpTW9kKTtcclxuICAgICAgICByZXR1cm4gdGhpcy56ZmlsbChiaVJldC50b1N0cmluZygxNiksIDI1Nik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDlr4bnrpfms5XlhaXlj6NcclxuICAgICAqIEBwYXJhbSBvYmog5b6F5Yqg5a+G5a+56LGhXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZW5jcnlwdChvYmopIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcclxuICAgICAgICBjb25zdCBzZWNLZXkgPSB0aGlzLmNyZWF0ZVNlY3JldEtleSgxNik7XHJcbiAgICAgICAgbGV0IGZpcnN0UmVzID0gdGhpcy5hZXNFbmNyeXB0KHRleHQsIHRoaXMuZmlyc3RLZXkpO1xyXG4gICAgICAgIGNvbnN0IHNlY29uZFJlcyA9IHRoaXMuYWVzRW5jcnlwdChmaXJzdFJlcywgc2VjS2V5KTtcclxuICAgICAgICBjb25zdCBlbmNTZWNLZXkgPSB0aGlzLnJzYUVuY3J5cHQoc2VjS2V5LCB0aGlzLnB1YktleSwgdGhpcy5tb2R1bHVzKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwYXJhbXM6IHNlY29uZFJlcyxcclxuICAgICAgICAgICAgZW5jU2VjS2V5OiBlbmNTZWNLZXlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iXX0=